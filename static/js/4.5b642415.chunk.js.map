{"version":3,"sources":["component/Dialogs/Dialogs.module.css","component/Dialogs/Message/user.png","component/Dialogs/DialogIteam/DialogIteam.js","component/Dialogs/Message/Message.js","component/Dialogs/AddMessageForm/AddMessageForm.js","component/Dialogs/Dialogs.js","component/Dialogs/DialogsContainer.js"],"names":["module","exports","DialogItem","props","path","id","to","name","Message","className","s","dialogs_users_container","dialogs_users_logo","src","logo","alt","dialogs_users__text","message","maxLength","maxLengthCreator","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","message_tx","Field","component","Textarea","validate","message_tx_btn","type","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","mesageElements","messages","m","dialogs_list","dialogs_users","values","sendMessage","newMessageBody","afterSubmit","compose","connect","sendMessageCreator","withAuthRedirect"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,cAAgB,+BAA+B,wBAA0B,yCAAyC,mBAAqB,oCAAoC,oBAAsB,qCAAqC,QAAU,yBAAyB,WAAa,4BAA4B,eAAiB,kC,oBCDraD,EAAOC,QAAU,IAA0B,kC,+FCY5BC,EATI,SAACC,GAClB,IAAIC,EAAI,mBAAeD,EAAME,IAC7B,OACE,4BACE,kBAAC,IAAD,CAASC,GAAIF,GAAOD,EAAMI,Q,kBCWjBC,EAdC,SAACL,GACf,OACE,yBAAKM,UAAWC,IAAEC,yBAChB,yBAAKF,UAAWC,IAAEE,oBAChB,yBAAKC,IAAKC,IAAOC,IAAI,iBACrB,sCAEF,yBAAKN,UAAWC,IAAEM,qBAChB,2BAAIb,EAAMc,Y,0CCNZC,EAAYC,YAAiB,IAkBpBC,cACX,CAACC,KAAM,uBACPC,gBANgB,SAACC,EAAQC,GAC3BA,EAASC,YAAM,2BAGFL,EAjBQ,SAACjB,GACpB,OACE,0BAAMM,UAAWC,IAAEO,QAASS,SAAUvB,EAAMwB,cAC1C,2BAAOlB,UAAWC,IAAEkB,YAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUxB,KAAK,iBAAiByB,SAAUd,KAE9D,+BACE,4BAAQT,UAAWC,IAAEuB,eAAgBC,KAAK,UAA1C,aCwBKC,EA/BC,SAAChC,GAEf,IAAIiC,EAAQjC,EAAMkC,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACtC,kBAAC,EAAD,CAAYlC,KAAMkC,EAAElC,KAAMmC,IAAKD,EAAEpC,GAAIA,GAAIoC,EAAEpC,QAEzCsC,EAAiBP,EAAMQ,SAASJ,KAAI,SAACK,GAAD,OACtC,kBAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,QAASyB,IAAKG,EAAExC,QAOtC,OACE,oCACE,uCACA,6BAASI,UAAWC,IAAE6B,SACpB,yBAAK9B,UAAWC,IAAEoC,cAChB,4BAAKR,IAEP,yBAAK7B,UAAWC,IAAEqC,eACfJ,EACD,kBAAC,EAAD,CAAgBjB,SAbJ,SAACsB,GACnB7C,EAAM8C,YAAYD,EAAOE,iBAYsBC,YAAahD,EAAMgD,kB,wBCPvDC,sBACbC,aAjBoB,SAACjB,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACb,GACxB,MAAO,CACLyB,YAAa,SAACC,GACZ1B,EAAS8B,YAAmBJ,SAShCK,IAFaH,CAGZjB","file":"static/js/4.5b642415.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3JnIy\",\"dialogs_list\":\"Dialogs_dialogs_list__3As3V\",\"dialogs_users\":\"Dialogs_dialogs_users__NSMNW\",\"dialogs_users_container\":\"Dialogs_dialogs_users_container__1_sY3\",\"dialogs_users_logo\":\"Dialogs_dialogs_users_logo__JWmwz\",\"dialogs_users__text\":\"Dialogs_dialogs_users__text__2qiMB\",\"message\":\"Dialogs_message__2Glba\",\"message_tx\":\"Dialogs_message_tx__1JWQ7\",\"message_tx_btn\":\"Dialogs_message_tx_btn__1vLMb\"};","module.exports = __webpack_public_path__ + \"static/media/user.50953027.png\";","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n  let path = `/dialogs/${props.id}`;\n  return (\n    <li>\n      <NavLink to={path}>{props.name}</NavLink>\n    </li>\n  );\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\";\nimport logo from './user.png'\n\nconst Message = (props) => {\n  return (\n    <div className={s.dialogs_users_container}>\n      <div className={s.dialogs_users_logo}>\n        <img src={logo}  alt='dialogs_logo'/>\n        <p>Dmitry</p>\n      </div>\n      <div className={s.dialogs_users__text}>\n        <p>{props.message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport {Textarea} from './../../../Common/FormsControl/FormsControl'\r\nimport s from \"../Dialogs.module.css\";\r\nimport {maxLengthCreator} from '../../../units/validators'\r\n\r\nconst maxLength = maxLengthCreator(50)\r\nconst AddMessageForm = (props) => {\r\n    return  (\r\n      <form className={s.message} onSubmit={props.handleSubmit}>\r\n        <label className={s.message_tx}>\r\n          <Field component={Textarea} name='newMessageBody' validate={maxLength} />\r\n        </label>\r\n        <label>\r\n          <button className={s.message_tx_btn} type=\"submit\" >Send</button>\r\n        </label>\r\n      </form>\r\n    )\r\n  }\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n  dispatch(reset('dialogAddMessageForm'));\r\n}\r\n  \r\nexport default reduxForm(\r\n    {form: 'dialogAddMessageForm',\r\n    onSubmitSuccess: afterSubmit,}\r\n  )(AddMessageForm)\r\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogIteam/DialogIteam\";\nimport Message from \"./Message/Message\";\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\n\n\nconst Dialogs = (props) => {\n\n  let state = props.dialogsPage\n\n  let dialogsElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ));\n  let mesageElements = state.messages.map((m) => (\n    <Message message={m.message} key={m.id}/>\n  ));\n \n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody)\n  }\n\n  return (\n    <>\n      <h1>Dialogs</h1>\n      <section className={s.dialogs}>\n        <div className={s.dialogs_list}>\n          <ul>{dialogsElements}</ul>\n        </div>\n        <div className={s.dialogs_users}>\n          {mesageElements}\n          <AddMessageForm onSubmit={addNewMessage} afterSubmit={props.afterSubmit}/>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Dialogs;\n","import {\n  sendMessageCreator,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    },\n  };\n};\n\n\n\nexport default compose (\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n) (Dialogs);\n"],"sourceRoot":""}